
import Mathlib.Data.Vector.Basic
import Mathlib.Data.Nat.Digits
import Mathlib.Data.Real.Basic
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Rat.Denumerable

/-

The finite powerset of a set.
We show that in the presence of a `Fintype` it is the same as the ordinary powerset,
and in the case of `‚Ñï, ‚Ñö, ‚Ñù, ‚ÑÇ` it is not the same.

Inspired by:

Localic completion of generalized metric spaces II: Powerlocales
STEVEN VICKERS
-/


def F_Vickers X := { A : Set X | Set.Finite A}

-- The ordinary powerset can be defined in these two, identical, ways:
def P_Vickers X := (Set.univ : Set (Set X))
def P' X := ùí´ (Set.univ : Set X)

example : P_Vickers X = P' X := by
  unfold P_Vickers P'
  simp only [Set.setOf_true, Set.powerset_univ]

example [Fintype X] : F_Vickers X = P_Vickers X := by
  ext x
  constructor
  . intro; trivial
  . intro; exact Set.toFinite x

lemma finite_powerset_improper [Infinite X]: F_Vickers X ‚â† P_Vickers X := by
  intro hc
  have h‚ÇÄ: ‚àÄ S, S ‚àà F_Vickers X ‚Üî S ‚àà P_Vickers X := fun S ‚Ü¶ Eq.to_iff (congrArg (Membership.mem S) hc)
  have h‚ÇÅ: Set.univ ‚àà P_Vickers X := by unfold P_Vickers; simp
  have h‚ÇÇ: Set.univ ‚àà F_Vickers X := by rw [h‚ÇÄ];exact h‚ÇÅ
  have h‚ÇÉ: Finite X := Set.finite_univ_iff.mp h‚ÇÇ
  exact not_finite X

example : F_Vickers ‚Ñï ‚â† P_Vickers ‚Ñï := finite_powerset_improper
example : F_Vickers ‚Ñ§ ‚â† P_Vickers ‚Ñ§ := finite_powerset_improper
example : F_Vickers ‚Ñö ‚â† P_Vickers ‚Ñö := finite_powerset_improper

instance : Infinite ‚Ñù := by
  exact @Infinite.of_injective ‚Ñù ‚Ñï _ (Œª x ‚Ü¶ x) (by
    intro x y h
    simp only [Nat.cast_inj] at h
    exact h
  )

example : F_Vickers ‚Ñù ‚â† P_Vickers ‚Ñù := finite_powerset_improper

instance : Infinite ‚ÑÇ := by
  exact @Infinite.of_injective ‚ÑÇ ‚Ñù _ (Œª x ‚Ü¶ x) (by
    intro x y h
    exact Complex.ofReal_inj.mp h
  )

example : F_Vickers ‚ÑÇ ‚â† P_Vickers ‚ÑÇ := finite_powerset_improper
